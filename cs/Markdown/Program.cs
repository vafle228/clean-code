// See https://aka.ms/new-console-template for more information

using Markdown.Generator.Generators;
using Markdown.Parser.Nodes;
using Markdown.Parser.Rules.TagRules;
using Markdown.Tokenizer;

namespace Markdown;

internal static class Program
{
    private const string Markdown = 
        """
        # Спецификация языка разметки
        
        Посмотрите этот файл в сыром виде. Сравните с тем, что показывает github.
        Все совпадения случайны ;)
        
        
        
        ## Курсив
        
        Текст, _окруженный с двух сторон_ одинарными символами подчерка,
        должен помещаться в HTML-тег \<em> вот так:
        
        Текст, \<em>окруженный с двух сторон\</em> одинарными символами подчерка,
        должен помещаться в HTML-тег \<em>.
        
        
        
        ### Полужирный
        
        __Выделенный двумя символами текст__ должен становиться полужирным с помощью тега \<strong>.
        
        
        
        #### Экранирование
        
        Любой символ можно экранировать, чтобы он не считался частью разметки.
        \_Вот это\_, не должно выделиться тегом \<em>.
        
        Символ экранирования исчезает из результата, только если экранирует что-то.
        Здесь сим\волы экранирования\ \должны остаться.\
        
        Символ экранирования тоже можно экранировать: \\_вот это будет выделено тегом_ \<em>
        
        
        
        ##### Взаимодействие тегов
        
        Внутри __двойного выделения _одинарное_ тоже__ работает.
        
        Но не наоборот — внутри _одинарного __двойное__ не_ работает.
        
        Подчерки внутри текста c цифрами_12_3 не считаются выделением и должны оставаться символами подчерка.
        
        Однако выделять часть слова они могут: и в _нач_але, и в сер_еди_не, и в кон_це._
        
        В то же время выделение в ра_зных сл_овах не работает.
        
        __Непарные_ символы в рамках одного абзаца не считаются выделением.
        
        За подчерками, начинающими выделение, должен следовать непробельный символ. Иначе эти_ подчерки_ не считаются выделением 
        и остаются просто символами подчерка.
        
        Подчерки, заканчивающие выделение, должны следовать за непробельным символом. Иначе эти _подчерки _не считаются окончанием выделения 
        и остаются просто символами подчерка.
        
        В случае __пересечения _двойных__ и одинарных_ подчерков ни один из них не считается выделением.
        
        Если внутри подчерков пустая строка ____, то они остаются символами подчерка.
        
        
        
        ###### Заголовки
        
        Абзац, начинающийся с "# ", выделяется тегом \<h1> в заголовок.
        В тексте заголовка могут присутствовать все прочие символы разметки с указанными правилами.
        
        Таким образом
        
        # Заголовок __с _разными_ символами__
        
        превратится в:
        
        \<h1>Заголовок \<strong>с \<em>разными\</em> символами\</strong>\</h1>
        """;
    
    private const string Test =
        """
        # Это заголовок
        #Это не заголовок
        И даже # это не заголовок
        * Это список
        *Это не список
        И это тоже * не список
        _Это выделится_
        __Это выделится__
        _Это не выделится__
        __И это не выделится_
        Внутри сл_оооооо_ва
        Тоже раб__оооооо__тает
        Но если неправильн_оооооо__
        То не раб__оооооо_тает
        В _нача_ле и в кооо_оонце_ __тож__е рабо__тает__
        Так \_ не получится_
        И _так\_
        А если так: \\_вот так вот\\_, то получится
        И _если __пересечь_, то не получится__
        __Вот так все _получится___
        _А вот так уже __нет___
        ___И даже так получится___
        # Все _здесь_ __тоже__ будет _раб_оооо__тать__
        * И даже _здесь_
        * Будет работать __обалдеть__

        * А это уже другой список
        Здесь не список
        * Здесь опять другой список
        * И вот * такая штуко*вина это всего одна запись в списке
        * # И заголовка здесь нет
        """;

    private const string Test1 = """_em\mm_""";
    
    public static void Main(string[] args)
    {
        var markdown = Test1;
        
        var rule = new BodyRule();
        var generator = new HtmlGenerator();
        var tokenizer = new MarkdownTokenizer();
        
        var tokens = tokenizer.Tokenize($"{markdown}\n");
        var rootNode = (rule.Match(tokens) as TagNode)!;
        var html = generator.Render(rootNode, tokens);
        
        Console.WriteLine("Input text:");
        Console.WriteLine(markdown);
        
        Console.WriteLine("--------------------");
        
        Console.WriteLine("Output text:");
        Console.WriteLine(html);
        
    }
}