// See https://aka.ms/new-console-template for more information

using Markdown.Generator.Generators;
using Markdown.Parser.Nodes;
using Markdown.Parser.Rules.TagRules;
using Markdown.Tokenizer;

namespace Markdown;

internal static class Program
{
    private const string Markdown = 
        """
        # Спецификация языка разметки
        
        Посмотрите этот файл в сыром виде. Сравните с тем, что показывает github.
        Все совпадения случайны ;)
        
        
        
        ## Курсив
        
        Текст, _окруженный с двух сторон_ одинарными символами подчерка,
        должен помещаться в HTML-тег <em> вот так:
        
        Текст, <em>окруженный с двух сторон</em> одинарными символами подчерка,
        должен помещаться в HTML-тег <em>.
        
        
        
        ### Полужирный
        
        __Выделенный двумя символами текст__ должен становиться полужирным с помощью тега <strong>.
        
        
        
        #### Экранирование
        
        Любой символ можно экранировать, чтобы он не считался частью разметки.
        \_Вот это\_, не должно выделиться тегом <em>.
        
        Символ экранирования исчезает из результата, только если экранирует что-то.
        Здесь сим\волы экранирования\ \должны остаться.\
        
        Символ экранирования тоже можно экранировать: \\_вот это будет выделено тегом_ <em>
        
        
        
        ##### Взаимодействие тегов
        
        Внутри __двойного выделения _одинарное_ тоже__ работает.
        
        Но не наоборот — внутри _одинарного __двойное__ не_ работает.
        
        Подчерки внутри текста c цифрами_12_3 не считаются выделением и должны оставаться символами подчерка.
        
        Однако выделять часть слова они могут: и в _нач_але, и в сер_еди_не, и в кон_це._
        
        В то же время выделение в ра_зных сл_овах не работает.
        
        __Непарные_ символы в рамках одного абзаца не считаются выделением.
        
        За подчерками, начинающими выделение, должен следовать непробельный символ. Иначе эти_ подчерки_ не считаются выделением 
        и остаются просто символами подчерка.
        
        Подчерки, заканчивающие выделение, должны следовать за непробельным символом. Иначе эти _подчерки _не считаются окончанием выделения 
        и остаются просто символами подчерка.
        
        В случае __пересечения _двойных__ и одинарных_ подчерков ни один из них не считается выделением.
        
        Если внутри подчерков пустая строка ____, то они остаются символами подчерка.
        
        
        
        ###### Заголовки
        
        Абзац, начинающийся с "# ", выделяется тегом <h1> в заголовок.
        В тексте заголовка могут присутствовать все прочие символы разметки с указанными правилами.
        
        Таким образом
        
        # Заголовок __с _разными_ символами__
        
        превратится в:
        
        <h1>Заголовок<strong> с <em>разными</em> символами</strong></h1>
        
        # Ссылки
        
        Текст вида [Я текст](google.com) выделяется теком <a> в ссылку.
        Внутри ссылки может присутсвовать только примитивный текст, который включает все возможные символы.
        Поэтому [_Вроде италик_](google.com) будет <a href="google.com">_Вроде италик_</a>
        
        Однако ссылки можно встроить в заголовки.
        
        # [Заголовок с ссылкой](google.com)
        
        Превратится в <h1><a href="google.com">Заголовок с ссылкой</a></h1> 
        """;
    
    public static void Main(string[] args)
    {
        var markdown = Markdown;
        
        var rule = new BodyRule();
        var generator = new HtmlGenerator();
        var tokenizer = new MarkdownTokenizer();
        
        var tokens = tokenizer.Tokenize($"{markdown}\n");
        var rootNode = (rule.Match(tokens) as TagNode)!;
        var html = generator.Render(rootNode, tokens);
        
        Console.WriteLine("Input text:");
        Console.WriteLine(markdown);
        
        Console.WriteLine("--------------------");
        
        Console.WriteLine("Output text:");
        Console.WriteLine(html);
    }
}